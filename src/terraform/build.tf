# Build.tf

locals {
  project_dir = (var.infra_as_code=="from_resource_manager")?".":"../.."
}

# SSH Keys + tf_env.sh
resource "null_resource" "tf_env" {
  provisioner "local-exec" {
    command = <<-EOT
    cd ${local.project_dir}
    mkdir -p target
    # Create the files needed by the shell scripts
    # Create SSH Key
    echo "${local.ssh_public_key}" > target/ssh_key_starter.pub
    echo "${local.ssh_private_key}" > target/ssh_key_starter
    chmod 600 target/ssh_key_starter.pub
    chmod 600 target/ssh_key_starter
    
    # Create target/tf_env.sh
    ENV_FILE=target/tf_env.sh
    echo "# Generated by terraform - build.tf" > $ENV_FILE
    echo "" >> $ENV_FILE
    echo "# Terraform Variables" >> $ENV_FILE
    echo_export() {
      if [ "$2" != "" ] && [ "$2" != "-" ]; then
        echo "export $1=\"$2\"" >> $ENV_FILE
      fi 
    }
    echo_export "TF_VAR_prefix" "${coalesce(var.prefix,"-")}"
    echo_export "TF_VAR_license_model" "${coalesce(var.license_model,"-")}"
    echo_export "TF_VAR_compartment_ocid" "${coalesce(var.compartment_ocid,"-")}"  
    echo "# Terraform Locals" >> $ENV_FILE
    echo_export "BASTION_IP" "${local.local_bastion_ip}"
    echo_export "COMPUTE_IP" "${local.local_compute_ip}"
    echo_export "IDCS_URL" "${local.local_idcs_url}"
    echo_export "OCIR_HOST" "${local.local_ocir_host}" 
    echo "# Fixed" >> $ENV_FILE
    echo_export "TF_VAR_db_type" "none"
    echo_export "TF_VAR_deploy_type" "private_compute"
    echo_export "TF_VAR_language" "python"
    echo_export "TF_VAR_ui_type" "html"
    # echo_export "OCI_STARTER_CREATION_DATE" "2025-10-27-13-42-29-487974"
    # echo_export "OCI_STARTER_VERSION" "4.2"
    # echo_export "OCI_STARTER_PARAMS" "prefix,java_framework,java_vm,java_version,ui_type,db_type,license_model,mode,infra_as_code,db_password,oke_type,security,deploy_type,language"
    chmod 755 $ENV_FILE
    EOT
  }
  triggers = {
    always_run = "${timestamp()}"
  }     
}

## BUILD_DEPLOY
resource "null_resource" "build_deploy" {
  provisioner "local-exec" {
    command = <<-EOT
        cd ${local.project_dir}
        export CALLED_BY_TERRAFORM="true"
        . ./starter.sh env        
        # pwd
        # ls -al target
        # cat target/terraform.tfstate
        # export
        # Run config command on the DB directly (ex RAC)

        # Build the DB tables (via Bastion)
        if [ -d src/db ]; then
            title "Deploy Bastion"
            $BIN_DIR/deploy_bastion.sh
            exit_on_error "Deploy Bastion"   
        fi  

        # Init target/compute
        if is_deploy_compute; then
            mkdir -p target/compute
            cp -r src/compute target/compute/.
        fi

        # Build all app* directories
        for APP_DIR in `app_dir_list`; do
            title "Build App $APP_DIR"
            src/$APP_DIR/build_app.sh
            exit_on_error "Build App $APP_DIR"
        done

        if [ -f src/ui/build_ui.sh ]; then
            title "Build UI"
            src/ui/build_ui.sh 
            exit_on_error "Build UI"
        fi

        # Deploy
        title "Deploy $TF_VAR_deploy_type"
        if is_deploy_compute; then
            $BIN_DIR/deploy_compute.sh
            exit_on_error "Deploy $TF_VAR_deploy_type"
        elif [ "$TF_VAR_deploy_type" == "kubernetes" ]; then
            $BIN_DIR/deploy_oke.sh
            exit_on_error "Deploy $TF_VAR_deploy_type"
        elif [ "$TF_VAR_deploy_type" == "container_instance" ]; then
            $BIN_DIR/deploy_ci.sh
            exit_on_error "Deploy $TF_VAR_deploy_type"
        fi
        ./starter.sh frm
        EOT
  }
  depends_on = [
    oci_apigateway_api.starter_api,
    oci_apigateway_deployment.starter_apigw_deployment,
    oci_apigateway_gateway.starter_apigw,
    oci_core_instance.starter_bastion,
    oci_core_instance.starter_compute,
    tls_private_key.ssh_key,  
    null_resource.tf_env  
  ]

  triggers = {
    always_run = "${timestamp()}"
  }      
}

## AFTER_BUILD
# Last action at the end of the build
resource "null_resource" "after_build" {
  provisioner "local-exec" {
    command = <<-EOT
        cd ${local.project_dir}    
        export CALLED_BY_TERRAFORM="true"        
        . ./starter.sh env    
        if [ "$TF_VAR_tls" != "" ]; then
            title "Certificate - Post Deploy"
            certificate_post_deploy 
        fi

        $BIN_DIR/add_api_portal.sh

        # Custom code after build
        if [ -f $PROJECT_DIR/src/after_build.sh ]; then
            $PROJECT_DIR/src/after_build.sh
        fi
        title "Done"
        $BIN_DIR/done.sh          
        EOT
  }
  depends_on = [      
    null_resource.build_deploy
  ]

  triggers = {
    always_run = "${timestamp()}"
  }    
}

data "local_file" "done_txt" {
  filename = "${local.project_dir}/target/done.txt"
  depends_on = [
    null_resource.after_build
  ]
}

# OUTPUT done.txt
output "done" {
    value = data.local_file.done_txt.content
}

# BEFORE_DESTROY
resource "null_resource" "before_destroy" {
  provisioner "local-exec" {
      when = destroy
      command = <<-EOT
        if [ ! -f starter.sh ]; then 
          cd ../..
        fi
        ./starter.sh destroy --called_by_resource_manager
        EOT
  }

  depends_on = [  
    null_resource.after_build
  ]
}